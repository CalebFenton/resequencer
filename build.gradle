version = '1.1.0'
def jarVersion = version

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.cf'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

buildscript {
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.5.0'
    }

    repositories {
        mavenCentral()
        jcenter()
    }
}

dependencies {
    // Lazy
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.4'

    // Experimental translations
    compile 'com.memetix:microsoft-translator-java-api:0.6.2'

    // Decompiling and recompiling DEX files
    compile 'org.smali:smali:2.1.1'
    compile 'org.smali:baksmali:2.1.1'

    compile files('libs/apktool.jar')

    // Testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

// Build a separate jar that contains all dependencies
task fatJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes('Main-Class': 'org.cf.resequencer.Main')
    }

    doLast {
        if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
            ant.symlink(link: file("${destinationDir}/resequencer.jar"), resource: archivePath, overwrite: true)
        }
    }
}
tasks.getByPath('build').dependsOn(fatJar)

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
    def outFile = fatJar.destinationDir.getPath() + '/' + fatJar.baseName + '-' + fatJar.version + '-proguard' + '.' + fatJar.extension

    injars fatJar.archivePath
    outjars outFile

    libraryjars "${System.properties['java.home']}/lib/rt.jar"

    dontobfuscate
    //dontoptimize
    optimizations '!code/allocation/variable'

    keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'
    keepattributes '*Annotation*,Signature,InnerClasses,EnclosingMethod'

    keep 'public class org.cf.resequencer.Main { public static void main(java.lang.String[]); }'

    dontwarn
    verbose
}
